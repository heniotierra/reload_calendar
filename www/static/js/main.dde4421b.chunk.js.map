{"version":3,"sources":["assets/arrow-back.svg","assets/arrow-next.svg","assets/close.svg","components/Modal/index.tsx","utils/date.ts","utils/generators.ts","components/DayCell/index.tsx","components/Calendar/index.tsx","store/models.ts","store/index.ts","components/Schedule/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Modal","isOpen","children","className","formatDate","Y","M","D","format","Date","generateNumberSequence","N","Array","from","keys","DayCell","day","highlighted","CalendarContainer","connect","addScheduleAppointment","schedule","appointment","useState","currentMonth","setCurrentMonth","currentYear","setCurrentYear","firstDayInMonth","setFirstDayInMonth","lastDayInMonth","setLastDayInMonth","firstDayInRange","setFirstDayInRange","lastDayInRange","setLastDayInRange","selectedDays","setSelectedDays","selectedDateRange","setSelectedDateRange","resetSelection","selectDate","selectedDay","length","push","selectDateRange","toSort","left","sort","a","b","includes","getDay","reverse","useLayoutEffect","todayTime","getMonth","getYear","startOfMonth","getDate","endOfMonth","getEndOfMonth","cellDays","map","onClick","src","backArrow","nextArrow","key","week","iteration","id","startDate","endDate","state","reducers","payload","store","init","models","dispatch","ScheduleContainer","name","i","App","modalShow","setModalShow","handlers","useSwipeable","onSwiped","close","Boolean","window","location","hostname","match","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dde4421b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-back.2fc0de6c.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-next.dca2cc9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.d637063e.svg\";","import React from 'react';\nimport './index.css';\n\ninterface ContainerProps {\n  isOpen: boolean;\n}\n\nconst Modal: React.FC<ContainerProps> = ({\n  isOpen,\n  children,\n}) => {\n  return (\n    <>\n      <div className={`modal ${isOpen ? 'modal-open' : ''}`}>\n        <div className=\"modal__inner\">\n          {children}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","import { format, startOfMonth, endOfMonth, getDay, getDate } from 'date-fns'; \n\nexport const formatYearMonth = (Y: number, M: number) => format(new Date(Y, M, 1, 0, 0, 0, 0), 'MMM yyyy');\n\nexport const formatDate = (Y: number, M: number, D: number) => format(new Date(Y, M, D, 0, 0, 0, 0), 'dd MMM yyyy');\n\nexport const getStartOfMonth = (Y: number, M: number) => getDay(startOfMonth(new Date(Y, M, 1, 0, 0, 0, 0)));\n\nexport const getEndOfMonth = (Y: number, M: number) => getDate(endOfMonth(new Date(Y, M, 1, 0, 0, 0, 0)));\n\nexport const getDayOfWeek = (Y: number, M: number, D: number) => getDay(new Date(Y, M, D, 0, 0, 0, 0));\n","export const generateNumberSequence = (N: number) => Array.from(Array(N).keys());\n","import React from 'react';\nimport './index.css';\n\ninterface ContainerProps {\n  day: number,\n  highlighted: boolean,\n}\n\nconst DayCell: React.FC<ContainerProps> = ({\n  day,\n  highlighted,\n}) => {\n  return (\n    <div className={`day-cell ${highlighted? 'highlighted-cell' : ''}`}>\n      {day}\n    </div>\n  )\n};\n\nexport default DayCell;\n","import React, { useState, useLayoutEffect } from 'react';\nimport { getMonth, getYear } from 'date-fns'; \nimport { connect } from 'react-redux';\nimport { ScheduleAppointment } from '../../store/models';\nimport {\n  getDayOfWeek,\n  getEndOfMonth,\n  getStartOfMonth,\n  formatYearMonth\n} from '../../utils/date';\nimport { generateNumberSequence } from '../../utils/generators';\nimport './index.css';\nimport backArrow from '../../assets/arrow-back.svg';\nimport nextArrow from '../../assets/arrow-next.svg';\nimport DayCell from '../DayCell';\n\ninterface ContainerProps {\n  addScheduleAppointment(scheduleAppointment: ScheduleAppointment): void\n}\n\nconst Calendar: React.FC<ContainerProps> = ({\n  addScheduleAppointment,\n}) => {\n  const [currentMonth, setCurrentMonth] = useState<number>(0);\n  const [currentYear, setCurrentYear] = useState<number>(0);\n  const [firstDayInMonth, setFirstDayInMonth] = useState<number>(0);\n  const [lastDayInMonth, setLastDayInMonth] = useState<number>(0);\n  const [firstDayInRange, setFirstDayInRange] = useState<number>(0);\n  const [lastDayInRange, setLastDayInRange] = useState<number>(0);\n  const [selectedDays, setSelectedDays] = useState<number[]>([]);\n  const [selectedDateRange, setSelectedDateRange] = useState<number[]>([]);\n\n  const seePrevMonth = () => {\n    resetSelection();\n    if (currentMonth === 1) {\n      setCurrentMonth(12);\n      setCurrentYear(currentYear-1);\n      return;\n    }\n    setCurrentMonth(currentMonth-1);\n  };\n\n  const seeNextMonth = () => {\n    resetSelection();\n    if (currentMonth === 12) {\n      setCurrentMonth(1);\n      setCurrentYear(currentYear+1);\n      return;\n    }\n    setCurrentMonth(currentMonth+1);\n  };\n\n  const resetSelection = () => {\n    setSelectedDays([]);\n    setSelectedDateRange([]);\n    setFirstDayInRange(0);\n    setLastDayInRange(0);\n  };\n\n  const selectDate = (selectedDay: number) => {\n    if (selectedDays.length >= 2){\n      resetSelection();\n      return;\n    } else {\n      selectedDays.push(selectedDay);\n      setSelectedDays([...selectedDays]);\n    }\n    selectDateRange();\n  };\n\n  const cellCh = 'c';\n  \n  const selectDateRange = () => {\n    if (selectedDays.length === 2) {\n      let toSort: number[] = [...selectedDays];\n      toSort = toSort.sort((a, b) => a - b);\n      let left = toSort[0];\n      while (left + 1 < toSort[1]) {\n        ++left;\n        if (![0,6].includes(getDayOfWeek(currentYear, currentMonth, left))) {\n          toSort.push(left);\n        }\n      }\n      toSort = toSort.sort((a, b) => a - b);\n      setFirstDayInRange(toSort[0]);\n      setLastDayInRange(toSort.reverse()[0]);\n      setSelectedDateRange([...toSort]);\n    }\n  };\n\n  useLayoutEffect(() => {\n    const todayTime: Date = new Date();\n    setCurrentMonth(getMonth(todayTime));\n    setCurrentYear(getYear(todayTime));\n  }, []);\n  useLayoutEffect(() => {\n    setFirstDayInMonth(getStartOfMonth(currentYear, currentMonth));\n    setLastDayInMonth(getEndOfMonth(currentYear, currentMonth));\n  }, [currentYear, currentMonth]);\n  useLayoutEffect(() => {}, [selectedDateRange]);\n\n  const cellDays = selectedDateRange.map((day) => `${cellCh}${day}`);\n  \n  return (\n    <div className=\"container\">\n      <div className=\"o-flex-grid\">\n          <div className=\"o-flex-grid--item\" onClick={seePrevMonth}>\n            <img className=\"back-calendar-btn\" src={backArrow}/>\n          </div>\n          <div className=\"o-flex-grid--item current-date\">{formatYearMonth(currentYear, currentMonth)}</div>\n          <div className=\"o-flex-grid--item\" onClick={seeNextMonth} >\n            <img className=\"next-calendar-btn\" src={nextArrow}/>\n          </div>\n      </div>\n      <div className=\"o-flex-grid weekdays-names\" key=\"r0\">\n        <div className=\"o-flex-grid--item\" key=\"sun\">\n          <div>S</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"mon\">\n          <div>M</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"tur\">\n          <div>T</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"wed\">\n          <div>W</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"thu\">\n          <div>T</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"fri\">\n          <div>F</div>\n        </div>\n        <div className=\"o-flex-grid--item\" key=\"sat\">\n          <div>S</div>\n        </div>\n      </div>\n      {\n        generateNumberSequence(6).map((week) => {\n          return (\n            <div className=\"o-flex-grid monthdays-row\" key={`r${week+1}`}>\n            {\n              generateNumberSequence(7).map((iteration) => {\n                if (week === 0) {\n                  const day = iteration + 1 - firstDayInMonth;\n                  if (iteration < firstDayInMonth) {\n                    return <div className=\"o-flex-grid--item\" key={`c${day}`}></div>;\n                  }\n                  return (\n                    <div\n                      id={`${cellCh}${day}`}\n                      key={`${cellCh}${day}`}\n                      className={`\n                        o-flex-grid--item\n                        monthday-col\n                        ${cellDays.includes(`${cellCh}${day}`)? ' selected-date ' : ' '}\n                        ${cellDays.length && `${cellCh}${firstDayInRange}` === `${cellCh}${day}` ? ' f-selected-date ' : ' '}\n                        ${cellDays.length && `${cellCh}${lastDayInRange}` === `${cellCh}${day}` ? 'l-selected-date' : ''}\n                      `}\n                      onClick={() => selectDate(day)}>\n                      <div>\n                        <DayCell day={day} highlighted={selectedDays.includes(day)} />\n                      </div>\n                    </div>\n                  );\n                }\n                const day = (week * 7) + iteration + 1 - firstDayInMonth;\n                if (day > lastDayInMonth) {\n                  return <div className=\"o-flex-grid--item\" key={`${cellCh}${day}`}></div>;\n                }\n                return (\n                  <div\n                    id={`${cellCh}${day}`}\n                    key={`${cellCh}${day}`}\n                    className={`\n                      o-flex-grid--item\n                      monthday-col\n                      ${cellDays.includes(`${cellCh}${day}`)? ' selected-date ' : ' '}\n                      ${cellDays.length && `${cellCh}${firstDayInRange}` === `${cellCh}${day}` ? ' f-selected-date ' : ' '}\n                      ${cellDays.length && `${cellCh}${lastDayInRange}` === `${cellCh}${day}` ? 'l-selected-date' : ''}\n                    `}\n                    onClick={() => selectDate(day)}>\n                    <div>\n                      <DayCell day={day} highlighted={selectedDays.includes(day)} />\n                    </div>\n                  </div>\n                );\n              })\n            }\n            </div>\n          );\n        })\n      }\n      <button className=\"apply-btn\" onClick={\n        () => {\n          addScheduleAppointment({\n            startDate: new Date(currentYear, currentMonth, firstDayInRange, 0, 0, 0, 0),\n            endDate: new Date(currentYear, currentMonth, lastDayInRange, 0, 0, 0, 0),\n          });\n          resetSelection();\n        }\n      }>\n        Apply\n      </button>\n\n    </div>\n  );\n};\n\nconst mapDispatch = ({ schedule: { addScheduleAppointment } }: any) => ({\n\taddScheduleAppointment: (appointment: ScheduleAppointment) => addScheduleAppointment(appointment),\n});\n\nconst CalendarContainer = connect(\n\tnull,\n\tmapDispatch,\n)(Calendar);\n\nexport default CalendarContainer;\n","export interface ScheduleAppointment {\n  startDate: Date,\n  endDate: Date,\n}\n\nexport interface AppState {\n  schedule: ScheduleAppointment[], \n}\n\nexport const schedule = {\n\tstate: [],\n\treducers: {\n    // handle state changes with pure functions\n    addScheduleAppointment (state: any, payload: ScheduleAppointment) {\n      return [...state, ...[payload]];\n    },\n\t},\n};\n","import { init } from '@rematch/core'\nimport * as models from './models'\n\nconst store = init({\n\tmodels,\n});\n\nexport default store;\n\nexport const { dispatch } = store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AppState, ScheduleAppointment } from '../../store/models';\nimport { formatDate } from '../../utils/date';\nimport { getYear, getMonth, getDate } from 'date-fns';\nimport './index.css';\n\ninterface ContainerProps {\n  schedule: ScheduleAppointment[],\n  name: string,\n}\n\nconst Schedule: React.FC<ContainerProps> = ({\n  schedule,\n  name,\n}) => {\n  return (\n    <div className=\"container\">\n      <strong>Hi, {name}! Below is your schedule:</strong>\n      <div className=\"o-flex-grid w-60\">\n        <div className=\"o-flex-grid--item\">\n          {\n            schedule.length? schedule.map((appointment, i) => {\n              const startDate = new Date(appointment.startDate);\n              const endDate = new Date(appointment.endDate);\n              return (\n                <div className=\"o-flex-grid schedule-dates\" key={`a${i}`}>\n                  <div className=\"o-flex-grid--item\">Start: {formatDate(getYear(startDate),getMonth(startDate),getDate(startDate))}</div>\n                  <div className=\"o-flex-grid--item\">End: {formatDate(getYear(endDate),getMonth(endDate),getDate(endDate))}</div>\n                </div>\n              );\n            }) : (\n              <div key=\"a1\" className=\"schedule-dates\">\n                <b>You have no scheduled appointments</b>\n              </div>\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n\tschedule: state.schedule,\n});\n\nconst ScheduleContainer = connect(\n  mapState,\n  () => {},\n)(Schedule);\n\nexport default ScheduleContainer;\n","import React, { useState } from 'react';\nimport './flexbox.css';\nimport Modal from './components/Modal';\nimport Calendar from './components/Calendar';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport close from './assets/close.svg';\nimport Schedule from './components/Schedule';\nimport { useSwipeable } from 'react-swipeable';\nimport './App.css';\n\nfunction App() {\n  const [modalShow, setModalShow] = useState<boolean>(false);\n  const handlers = useSwipeable({ onSwiped: () => setModalShow(false) });\n  \n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <div className=\"app-header-title\">Schedule</div>\n        </header>\n        <div className=\"shedule-content\">\n          <button className=\"btn-blue\" onClick={() => setModalShow(true)}>\n            Open Calendar\n          </button>\n          <Schedule name=\"Olef\" />\n          <Modal isOpen={modalShow}>\n            <div className=\"o-flex-grid w-100\" {...handlers}>\n              <div className=\"o-flex-grid--item w-5\">\n                <img className=\"close-calendar-btn\" src={close} onClick={() => setModalShow(false)} />\n              </div>\n              <div className=\"o-flex-grid--item\">\n                <label className=\"calendar-title\">Calendar</label>\n              </div>\n            </div>\n            <Calendar />\n          </Modal>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}